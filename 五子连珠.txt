bool check_win(void)
{
 int cnt = 0;
 
 //判断横向
 for(int i=1;i<5;i++)
 {
  if(0<=key_y-i)
  {
   if(board[key_x][key_y] == board[key_x][key_y-i])
   {
    cnt++;
   }
   else
   {
    break;
   }
  }
 }
 for(int i=1;i<5;i++)
 {
  if(14>=key_y+i)
  {
   if(board[key_x][key_y] == board[key_x][key_y+i])
   {
    cnt++;
   }
   else
   {
    break;
   }
  }
 }
 if(4 <= cnt)
 {
  return true;
 }
 cnt = 0;
 
 //判断纵向
 for(int i=1;i<5;i++)
 {
  if(0<=key_x-i)
  {
   if(board[key_x][key_y] == board[key_x-i][key_y])
   {
    cnt++;
   }
   else
   {
    break;
   }
  }
 }
 for(int i=1;i<5;i++)
 {
  if(14>=key_x+i)
  {
   if(board[key_x][key_y] == board[key_x+i][key_y])
   {
    cnt++;
   }
   else
   {
    break;
   }
  }
 }
 if(4 <= cnt)
 {
  return true;
 }
 cnt = 0;
 
 //判断左斜
 for(int i=1;i<5;i++)
 {
  if(0<=key_x-i && 0<=key_y-i)
  {
   if(board[key_x][key_y] == board[key_x-i][key_y-i])
   {
    cnt++;
   }
   else
   {
    break;
   }
  }
 }
 for(int i=1;i<5;i++)
 {
  if(14>=key_x+i && 14>=key_y+i)
  {
   if(board[key_x][key_y] == board[key_x+i][key_y+i])
   {
    cnt++;
   }
   else
   {
    break;
   }
  }
 }
 if(4 <= cnt)
 {
  return true;
 }
 cnt = 0;
 
 //判断右斜
 for(int i=1;i<5;i++)
 {
  if(0<=key_x-i && 14>=key_y+i)
  {
   if(board[key_x][key_y] == board[key_x-i][key_y+i])
   {
    cnt++;
   }
   else
   {
    break;
   }
  }
 }
 for(int i=1;i<5;i++)
 {
  if(14>=key_x+i && 0<=key_y-i)
  {
   if(board[key_x][key_y] == board[key_x+i][key_y-i])
   {
    cnt++;
   }
   else
   {
    break;
   }
  }
 }
 if(4 <= cnt)
 {
  return true;
 }
 
 return false;
}